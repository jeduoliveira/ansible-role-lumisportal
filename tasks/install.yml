---
- name: created lumis home directory
  file:
    path: "{{ lumis_directory }}/{{ lumis_name }}"
    state: directory
    owner: "{{ lumis_user }}"
    group: "{{ lumis_group }}"

- name: copied package remote lumis
  get_url:
    url: "{{ lumis_unarchive_url }}"
    dest: "/tmp/lumisportal_{{ lumis_version }}.{{ lumis_release }}.zip"
    mode: 0755
  when: lumis_source_install_type == 'remote'

- name: copied package local lumis
  copy:
    src: "{{ lumis_source_install_path }}/lumisportal_{{ lumis_version }}.{{ lumis_release }}.zip"
    dest: "/tmp/lumisportal_{{ lumis_version }}.{{ lumis_release }}.zip"
    mode: 0755
  when: lumis_source_install_type == 'local'

- name: unarchive lumis zip
  unarchive:
    src: "/tmp/lumisportal_{{ lumis_version }}.{{ lumis_release }}.zip"
    dest: "{{ lumis_directory }}/{{ lumis_name }}"
    owner: "{{ lumis_user }}"
    group: "{{ lumis_group }}"
    mode: 0755
    remote_src: true
    creates: "{{ lumis_directory }}/{{ lumis_name }}/setup"

- name: configured context root on tomcat
  copy:
    dest: "{{ tomcat_directory }}/{{ tomcat_name }}/conf/Catalina/localhost/{{ tomcat_context }}.xml"
    content: "<Context path=\"\" docBase=\"{{ lumis_directory }}/{{ lumis_name }}/www\" crossContext=\"true\"/>"
    owner: "{{ lumis_group }}"
    group: "{{ lumis_group }}"
    mode: 0755
  when: tomcat_context == 'ROOT'
  notify: restart tomcat

- name: configured context different root on tomcat
  copy:
    dest: "{{ tomcat_directory }}/{{ tomcat_name }}/conf/Catalina/localhost/{{ tomcat_context }}.xml"
    content: <Context path=\"/{{ tomcat_context }}\" docBase=\"{{ lumis_directory }}/{{ lumis_name }}/www\" crossContext=\"true\"/>
    owner: "{{ lumis_user }}"
    group: "{{ lumis_group }}"
    mode: 0755
  when: tomcat_context != 'ROOT'
  notify: restart tomcat

- name: copied libs to tomcat
  copy:
    src: "{{ lumis_directory }}/{{ lumis_name }}/lib/shared/"
    dest: "{{ tomcat_directory }}/{{ tomcat_name }}/lib/"
    owner: "{{ lumis_user }}"
    group: "{{ lumis_group }}"
    remote_src: true
    mode: 0755
  notify: restart tomcat

- name: configured web.xml
  replace:
    path: "{{ lumis_directory }}/{{ lumis_name }}/www/WEB-INF/web.xml"
    regexp: 'LUMIS_DATA_PATH'
    replace: "{{ lumis_directory }}/{{ lumis_name }}/lumisdata"
  notify: restart tomcat

- name: copied template lumisportalconfig.xml
  template:
    src: "lumisdata/config/lumisportalconfig.xml.j2"
    dest: "{{ lumis_directory }}/{{ lumis_name }}/lumisdata/config/lumisportalconfig.xml"
    owner: "{{ lumis_user }}"
    group: "{{ lumis_group  }}"
    mode: 0755
  notify: restart tomcat

- name: copied template lumishibernate.cfg.xml
  template:
    src: "lumisdata/config/lumishibernate.cfg.xml.j2"
    dest: "{{ lumis_directory }}/{{ lumis_name }}/lumisdata/config/lumishibernate.cfg.xml"
    owner: "{{ lumis_user }}"
    group: "{{ lumis_group  }}"
    mode: 0755
  notify: restart tomcat

- include_tasks: setup-MySQL.yml
  when: lumis_db_type == 'MySQL'

- name: Elasticsearch | Ensure elasticsearch group
  group:
    name: elasticsearch
    state: present

- name: Tomcat | Ensure tomcat user
  user:
    name: elasticsearch
    state: present
    group: elasticsearch
    createhome: false
    system: true

- name: created lumis-analysis directory
  file:
    path: "{{ lumis_directory }}/{{ lumis_name }}/lumisdata/shared/data/elasticsearch/lumis-analysis"
    state: directory
    owner: elasticsearch
    group: elasticsearch
    mode: 0755
  notify: restart tomcat

- name: created a symbolic link lumis-analysis
  file:
    src: "{{ lumis_directory }}/{{ lumis_name }}/lumisdata/shared/data/elasticsearch/lumis-analysis"
    dest: /etc/elasticsearch/lumis-analysis
    owner: elasticsearch
    group: elasticsearch
    state: link
    mode: 0755
  notify: restart tomcat

- name: stat synonyms
  stat:
    path: /etc/elasticsearch/lumis-analysis/synonyms-pt_BR.txt
  register: p

- name: created synonyms files
  file:
    path: "{{ item }}"
    state: touch
    owner: elasticsearch
    group: elasticsearch
    mode: 0755
  with_items: "{{ synonyms }}"
  when: p.stat.exists is defined and not p.stat.exists
